//Java streams
Java Program to Find All the Permutations of a String //need ti prepare

1) Java Program to Find the First Non-repeated Character in a String
 Using groupingBy
-----------------
       List<String> strings = Arrays.asList("a", "a", "b", "b", "b", "c", "d", "c", "d", "a", "a");

       Map<String, Long> stringCounts = strings.stream()
                .collect(Collectors.groupingBy(Function.identity(),Collectors.counting()));
Using Collectors:
-----------------
      Map<String, Integer> stringCounts = strings.stream()
        .collect(Collectors.toMap(
                s -> s, // Key mapper
                s -> 1, // Value mapper
               (a,b)->a+b // Merge function to handle duplicate keys
        ));
2) Reverse Words
-----------------
     String str="Sample list of strings";
     System.out.println(Arrays.stream(str.split("\\W")).reduce("",(f1,f2)->f2+" "+f1));
3) Reverse chars 
-----------------
    String toReverse = "EDCBA";

//String.valueOf((char) c) -->char to String conversion is important because in reduce initial value is emplty string while concat it will cause compilation error 
// so while mapping in advance convert it to String
       toReverse=toReverse.chars()
               .mapToObj(c -> String.valueOf((char) c))
               .reduce("", (acc, c) -> c+acc);
       System.out.println(toReverse);

4) Count voewls and consonent
--------------------------------
String input = "abcabcd";
   List<Character> voewls= Arrays.asList('a','A','e','E','i','I','o','O','u','U');
 
   Long voewlsCount = input.chars().mapToObj(ch->(char)ch).filter(ch->voewls.indexOf(ch)!=-1).count();
   Long consonentCount = input.chars().mapToObj(ch->(char)ch).filter(ch-> Character.isLetter(ch) && voewls.indexOf(ch)==-1).count();

5) Combine streams : 
    String[] array1 = {"Java", "is", "fun"};
    String[] array2 = {"and", "powerful"};

    Stream<String> s1= Stream.of(array1);
    Stream<String> s2= Stream.of(array2);
    System.out.println(Stream.concat(s1,s2).collect(Collectors.toList()));
