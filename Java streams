//Java streams
Java Program to Find All the Permutations of a String //need ti prepare

******************************************************************************************************************************
*** toMap() methods third paramater for merging value in case of key parameter found duplicate else it wont called**

 List<String> list = Arrays.asList("a", "a");
 Map<String, Integer> map = list.stream()
         .collect(Collectors.toMap(
                 Function.identity(),
                 String::length,
                 (existingValue, replacementForExistingValueInCaseValueForKeyDuplicates) -> existing+replacement, LinkedHashMap::new));
 System.out.println(map);
*** Default map implementation is HashMap, To customize it in toMap pass last argument as combiner object of LinkedHashMap
like LinkedHashMap::new

+++ In case if wants to return different implementation of map in groupingBy use Collectors.toCollection()

    List<String> strings = Arrays.asList("alpha","beta","gamma");
    Map<Integer, List<String>> collect = strings
            .stream()
            .collect(Collectors.groupingBy(String::length,Collectors.toCollection(LinkedList::new)));
    System.out.println(collect);
*****************************************************************************************************************************
    // Group by department and find the second highest salary in each department
    Map<String, List<Employee>> secondHighestSalariesByDept = employees.stream()
            .collect(Collectors.groupingBy(
                    Employee::getDepartment,
                    Collectors.collectingAndThen(
                            Collectors.toList(),
                            list -> list.stream()
                                    .sorted(Comparator.comparingDouble(Employee::getSalary).reversed())
                                    .limit(2).toList()
                    )
            ));

*****************************************************************************************************************************

Collectors.collectingAndThen :

Collectors.collectingAndThen is a collector that allows you to perform an additional transformation on the result of another collector. Itâ€™s useful when you want to apply a final transformation or operation on the result before returning it.

Use case : Suppose you want to find the average salary of all employees and then round it to the nearest integer.

List<Employee> employees = Arrays.asList(
        new Employee("Alice", 50000),
        new Employee("Bob", 65000),
        new Employee("Charlie", 78000),
        new Employee("Sarah", 45000)
);

// Calculate average salary and round it to the nearest integer
int averageSalary1 = employees.stream()
        .mapToDouble(Employee::getSalary)
        .boxed()
        .collect(Collectors.collectingAndThen(
                Collectors.averagingDouble(Double::doubleValue), // First collector to find the average salary
                average -> (int) Math.round(average))); // Additional operation: rounding to the nearest integer

System.out.println("Average Salary after roundup: " + averageSalary1);

+++++++++++++++++

        //Print greater number than next
        List<Integer> numbers=Arrays.asList(1, 2, 3, 4,0,1,2,3,4,5,1,2,3);

        List<Integer> list1 = IntStream.range(0,numbers.size()-1)
                .filter(index -> numbers.get(index)> numbers.get(index+1))
                .mapToObj(numbers::get).collect(Collectors.toList());
        System.out.println();

        //Get min and max
        List<Integer> integerList = Arrays.asList(12, 19, 38, 397, 16, 980, 37, 165, 587, 87, 987, 568);
        Map<String, Integer> map = integerList.stream().collect(Collectors.teeing(
                Collectors.maxBy(Integer::compareTo),// First collector: finding max
                Collectors.minBy(Integer::compareTo),// second collector: finding min
                (e1, e2) -> Map.of("max", e1.get(), "min", e2.get()) // combining results in a map
        ));
        System.out.println(map);
***************************************************************************************************************************************

1) Java Program to Find the First Non-repeated Character in a String
 Using groupingBy
-----------------
       List<String> strings = Arrays.asList("a", "a", "b", "b", "b", "c", "d", "c", "d", "a", "a");

       Map<String, Long> stringCounts = strings.stream()
                .collect(Collectors.groupingBy(Function.identity(),Collectors.counting()));
Using Collectors:
-----------------
      Map<String, Integer> stringCounts = strings.stream()
        .collect(Collectors.toMap(
                s -> s, // Key mapper
                s -> 1, // Value mapper
               (a,b)->a+b // Merge function to handle duplicate keys
        ));
2) Reverse Words
-----------------
     String str="Sample list of strings";
     System.out.println(Arrays.stream(str.split("\\W")).reduce("",(f1,f2)->f2+" "+f1));
3) Reverse chars 
-----------------
    String toReverse = "EDCBA";

//String.valueOf((char) c) -->char to String conversion is important because in reduce initial value is emplty string while concat it will cause compilation error 
// so while mapping in advance convert it to String
       toReverse=toReverse.chars()
               .mapToObj(c -> String.valueOf((char) c))
               .reduce("", (acc, c) -> c+acc);
       System.out.println(toReverse);

4) Count voewls and consonent
--------------------------------
String input = "abcabcd";
   List<Character> voewls= Arrays.asList('a','A','e','E','i','I','o','O','u','U');
 
   Long voewlsCount = input.chars().mapToObj(ch->(char)ch).filter(ch->voewls.indexOf(ch)!=-1).count();
   Long consonentCount = input.chars().mapToObj(ch->(char)ch).filter(ch-> Character.isLetter(ch) && voewls.indexOf(ch)==-1).count();

5) Combine streams : 
    String[] array1 = {"Java", "is", "fun"};
    String[] array2 = {"and", "powerful"};

    Stream<String> s1= Stream.of(array1);
    Stream<String> s2= Stream.of(array2);
    System.out.println(Stream.concat(s1,s2).collect(Collectors.toList()));

6) max() method veersions
        Stream<Integer> str = Stream.of(1,2,3,4);
        System.out.println(str.max(Integer::compare).get());
7) Sum of digits in number
   int number = 123; //
   System.out.println(String.valueOf(number).chars().mapToObj(ch -> (char)ch)
            .map(Character::getNumericValue).reduce(0,(a,b)->a+b));
